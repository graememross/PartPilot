// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parts {
  id       Int     @id @default(autoincrement())
  title    String?
  quantity Int     @default(0)
  onOrder  Int     @default(0)
  reserved Int     @default(0)
  storeId  String?
  store    Store?  @relation(fields: [storeId], references: [id])

  productId          Int?
  productCode        String  @unique
  productModel       String?
  productDescription String?

  parentCatalogName String?
  catalogName       String?
  brandName         String?

  encapStandard String?

  productImages String[]
  pdfLink       String?
  productLink   String?

  prices Json?

  voltage     Float? //Float is a "double precision" in Postgres
  capacitance Float?
  current     Float?
  power       Float?
  resistance  Float?
  frequency   Float?
  inductance  Float?

  tolerance String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  Store         Store[]
  Warehouse     Warehouse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bomCsv      String?
  version     String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Store {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parts       Parts[]
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])

  @@unique([name, ownerId])
}

model Warehouse {
  id          String   @id @default(uuid())
  name        String
  description String
  url         String   @default("/")
  canDemand   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])

  @@unique([name, ownerId])
}
